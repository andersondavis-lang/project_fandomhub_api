# Generated by Django 5.0.1 on 2024-03-01 20:03

import apps.utils.paths
import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('categories', '__first__'),
        ('persons', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='Anime',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('available', models.BooleanField(db_index=True, default=True, verbose_name='Available')),
                ('created_at', models.DateField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateField(auto_now=True, verbose_name='Updated at')),
                ('slug', models.SlugField(blank=True, null=True, unique=True, verbose_name='Slug')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Name (ENG)')),
                ('name_jpn', models.CharField(max_length=255, unique=True, verbose_name='Name (JPN)')),
                ('image', models.ImageField(blank=True, null=True, upload_to=apps.utils.paths.image_path, verbose_name='Image')),
                ('synopsis', models.TextField(blank=True, null=True, verbose_name='Synopsis')),
                ('episodes', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1500)], verbose_name='Episodes')),
                ('duration', models.CharField(blank=True, max_length=20, null=True, verbose_name='Duration')),
                ('release', models.DateField(blank=True, null=True, verbose_name='Release')),
                ('category', models.IntegerField(choices=[(0, 'Pending'), (1, 'TV'), (2, 'OVA'), (3, 'Movie'), (4, 'Special'), (5, 'ONA'), (6, 'Music')], default=0, verbose_name='Category')),
                ('website', models.URLField(blank=True, max_length=255)),
                ('trailer', models.URLField(blank=True, max_length=255)),
                ('status', models.IntegerField(choices=[(0, 'Pending'), (1, 'Finished'), (2, 'Airing'), (3, 'Upcoming')], default=0, verbose_name='Status')),
                ('rating', models.IntegerField(choices=[(0, 'Pending'), (1, 'G - All Ages'), (2, 'PG - Children'), (3, 'PG-13 - Teens 13 and Older'), (4, 'R - 17+ (Violence & Profanity)'), (5, 'R+ - Profanity & Mild Nudity'), (6, 'RX - Hentai')], default=0, verbose_name='Rating')),
                ('mean', models.FloatField(blank=True, null=True, verbose_name='Mean')),
                ('rank', models.IntegerField(blank=True, null=True, verbose_name='Rank')),
                ('popularity', models.IntegerField(blank=True, null=True, verbose_name='Popularity')),
                ('num_list_users', models.IntegerField(blank=True, null=True, verbose_name='Number of List Users')),
                ('num_scoring_users', models.IntegerField(blank=True, null=True, verbose_name='Number of Scoring Users')),
                ('genre_id', models.ManyToManyField(blank=True, to='categories.genre')),
                ('season_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='categories.season')),
                ('studio_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='categories.studio')),
            ],
            options={
                'verbose_name': 'Anime',
                'verbose_name_plural': 'Animes',
            },
        ),
        migrations.CreateModel(
            name='Manga',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('available', models.BooleanField(db_index=True, default=True, verbose_name='Available')),
                ('created_at', models.DateField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateField(auto_now=True, verbose_name='Updated at')),
                ('slug', models.SlugField(blank=True, null=True, unique=True, verbose_name='Slug')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Name (ENG)')),
                ('name_jpn', models.CharField(max_length=255, unique=True, verbose_name='Name (JPN)')),
                ('image', models.ImageField(blank=True, null=True, upload_to=apps.utils.paths.image_path, verbose_name='Image')),
                ('synopsis', models.TextField(blank=True, null=True, verbose_name='Synopsis')),
                ('chapters', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Chapters')),
                ('release', models.DateField(blank=True, null=True, verbose_name='Release')),
                ('media_type', models.IntegerField(choices=[('0', 'Pending'), ('1', 'Manga'), ('2', 'Novel'), ('3', 'One Shot'), ('4', 'Doujinshi'), ('5', 'Manhwa'), ('6', 'OEL')], default=0, verbose_name='Media Type')),
                ('website', models.URLField(blank=True, max_length=255)),
                ('status', models.IntegerField(choices=[(0, 'Pending'), (1, 'Finished'), (2, 'Airing'), (3, 'Upcoming')], default=0, verbose_name='Status')),
                ('mean', models.FloatField(blank=True, null=True, verbose_name='Mean')),
                ('rank', models.IntegerField(blank=True, null=True, verbose_name='Rank')),
                ('popularity', models.IntegerField(blank=True, null=True, verbose_name='Popularity')),
                ('num_list_users', models.IntegerField(blank=True, null=True, verbose_name='Number of List Users')),
                ('num_scoring_users', models.IntegerField(blank=True, null=True, verbose_name='Number of Scoring Users')),
                ('author_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='persons.author')),
                ('demographic_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='categories.demographic')),
                ('genre_id', models.ManyToManyField(blank=True, to='categories.genre')),
            ],
            options={
                'verbose_name': 'Manga',
                'verbose_name_plural': 'Mangas',
            },
        ),
    ]
